// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chromedp/chromedp (interfaces: Allocator)
//
// Generated by this command:
//
//	mockgen -destination=chromedp_mock.go -package=cdp github.com/chromedp/chromedp Allocator
//

// Package cdp is a generated GoMock package.
package cdp

import (
	context "context"
	reflect "reflect"

	chromedp "github.com/chromedp/chromedp"
	gomock "go.uber.org/mock/gomock"
)

// MockAllocator is a mock of Allocator interface.
type MockAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockAllocatorMockRecorder
	isgomock struct{}
}

// MockAllocatorMockRecorder is the mock recorder for MockAllocator.
type MockAllocatorMockRecorder struct {
	mock *MockAllocator
}

// NewMockAllocator creates a new mock instance.
func NewMockAllocator(ctrl *gomock.Controller) *MockAllocator {
	mock := &MockAllocator{ctrl: ctrl}
	mock.recorder = &MockAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllocator) EXPECT() *MockAllocatorMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockAllocator) Allocate(arg0 context.Context, arg1 ...func(*chromedp.Browser)) (*chromedp.Browser, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Allocate", varargs...)
	ret0, _ := ret[0].(*chromedp.Browser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate.
func (mr *MockAllocatorMockRecorder) Allocate(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockAllocator)(nil).Allocate), varargs...)
}

// Wait mocks base method.
func (m *MockAllocator) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockAllocatorMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockAllocator)(nil).Wait))
}
