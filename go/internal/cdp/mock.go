// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stlimtat/sqxlab/go/internal/cdp (interfaces: IAllocatorFactory,IContextFactory,ISession)
//
// Generated by this command:
//
//	mockgen -destination=mock.go -package=cdp github.com/stlimtat/sqxlab/go/internal/cdp IAllocatorFactory,IContextFactory,ISession
//

// Package cdp is a generated GoMock package.
package cdp

import (
	context "context"
	reflect "reflect"

	chromedp "github.com/chromedp/chromedp"
	gomock "go.uber.org/mock/gomock"
)

// MockIAllocatorFactory is a mock of IAllocatorFactory interface.
type MockIAllocatorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIAllocatorFactoryMockRecorder
	isgomock struct{}
}

// MockIAllocatorFactoryMockRecorder is the mock recorder for MockIAllocatorFactory.
type MockIAllocatorFactoryMockRecorder struct {
	mock *MockIAllocatorFactory
}

// NewMockIAllocatorFactory creates a new mock instance.
func NewMockIAllocatorFactory(ctrl *gomock.Controller) *MockIAllocatorFactory {
	mock := &MockIAllocatorFactory{ctrl: ctrl}
	mock.recorder = &MockIAllocatorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAllocatorFactory) EXPECT() *MockIAllocatorFactoryMockRecorder {
	return m.recorder
}

// GetAllocatorType mocks base method.
func (m *MockIAllocatorFactory) GetAllocatorType(arg0 context.Context, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllocatorType", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAllocatorType indicates an expected call of GetAllocatorType.
func (mr *MockIAllocatorFactoryMockRecorder) GetAllocatorType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllocatorType", reflect.TypeOf((*MockIAllocatorFactory)(nil).GetAllocatorType), arg0, arg1)
}

// NewAllocator mocks base method.
func (m *MockIAllocatorFactory) NewAllocator(arg0 context.Context, arg1 string) (context.Context, *chromedp.Context, chromedp.Allocator, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAllocator", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*chromedp.Context)
	ret2, _ := ret[2].(chromedp.Allocator)
	ret3, _ := ret[3].(context.CancelFunc)
	return ret0, ret1, ret2, ret3
}

// NewAllocator indicates an expected call of NewAllocator.
func (mr *MockIAllocatorFactoryMockRecorder) NewAllocator(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAllocator", reflect.TypeOf((*MockIAllocatorFactory)(nil).NewAllocator), arg0, arg1)
}

// MockIContextFactory is a mock of IContextFactory interface.
type MockIContextFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIContextFactoryMockRecorder
	isgomock struct{}
}

// MockIContextFactoryMockRecorder is the mock recorder for MockIContextFactory.
type MockIContextFactoryMockRecorder struct {
	mock *MockIContextFactory
}

// NewMockIContextFactory creates a new mock instance.
func NewMockIContextFactory(ctrl *gomock.Controller) *MockIContextFactory {
	mock := &MockIContextFactory{ctrl: ctrl}
	mock.recorder = &MockIContextFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContextFactory) EXPECT() *MockIContextFactoryMockRecorder {
	return m.recorder
}

// NewContext mocks base method.
func (m *MockIContextFactory) NewContext(arg0 context.Context) (context.Context, *chromedp.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContext", arg0)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*chromedp.Context)
	ret2, _ := ret[2].(context.CancelFunc)
	return ret0, ret1, ret2
}

// NewContext indicates an expected call of NewContext.
func (mr *MockIContextFactoryMockRecorder) NewContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContext", reflect.TypeOf((*MockIContextFactory)(nil).NewContext), arg0)
}

// MockISession is a mock of ISession interface.
type MockISession struct {
	ctrl     *gomock.Controller
	recorder *MockISessionMockRecorder
	isgomock struct{}
}

// MockISessionMockRecorder is the mock recorder for MockISession.
type MockISessionMockRecorder struct {
	mock *MockISession
}

// NewMockISession creates a new mock instance.
func NewMockISession(ctrl *gomock.Controller) *MockISession {
	mock := &MockISession{ctrl: ctrl}
	mock.recorder = &MockISessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISession) EXPECT() *MockISessionMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISession) Run(arg0 context.Context, arg1 chromedp.Tasks) (context.Context, *chromedp.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*chromedp.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockISessionMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISession)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *MockISession) Stop(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockISessionMockRecorder) Stop(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockISession)(nil).Stop), arg0)
}
